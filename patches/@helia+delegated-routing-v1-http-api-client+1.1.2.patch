diff --git a/node_modules/@helia/delegated-routing-v1-http-api-client/dist/src/client.js b/node_modules/@helia/delegated-routing-v1-http-api-client/dist/src/client.js
index 9461349..b0caa7d 100644
--- a/node_modules/@helia/delegated-routing-v1-http-api-client/dist/src/client.js
+++ b/node_modules/@helia/delegated-routing-v1-http-api-client/dist/src/client.js
@@ -73,6 +73,16 @@ export class DefaultDelegatedRoutingV1HttpApiClient {
             const resource = `${this.clientUrl}routing/v1/providers/${cid.toString()}`;
             const getOptions = { headers: { Accept: 'application/x-ndjson' }, signal };
             const res = await fetch(resource, getOptions);
+            if (res.status === 404) {
+              // https://specs.ipfs.tech/routing/http-routing-v1/#response-status-codes
+              // 404 (Not Found): must be returned if no matching records are found.
+              throw new CodeError('No matching records found.', 'ERR_NOT_FOUND')
+            }
+            if (res.status === 422) {
+              // https://specs.ipfs.tech/routing/http-routing-v1/#response-status-codes
+              // 422 (Unprocessable Entity): request does not conform to schema or semantic constraints.
+              throw new CodeError('Request does not conform to schema or semantic constraints.', 'ERR_INVALID_REQUEST')
+            }
             if (res.body == null) {
                 throw new CodeError('Routing response had no body', 'ERR_BAD_RESPONSE');
             }
@@ -208,7 +218,7 @@ export class DefaultDelegatedRoutingV1HttpApiClient {
         if (record.Schema === 'peer') {
             // Peer schema can have additional, user-defined, fields.
             record.ID = peerIdFromString(record.ID);
-            record.Addrs = record.Addrs.map(multiaddr);
+            record.Addrs = record.Addrs?.map(multiaddr) ?? [];
             record.Protocols = record.Protocols ?? [];
             return record;
         }
@@ -219,7 +229,7 @@ export class DefaultDelegatedRoutingV1HttpApiClient {
             return {
                 Schema: 'peer',
                 ID: peerIdFromString(record.ID),
-                Addrs: record.Addrs.map(multiaddr),
+                Addrs: record.Addrs?.map(multiaddr) ?? [],
                 Protocols: record.Protocol != null ? [record.Protocol] : []
             };
         }
@@ -227,7 +237,7 @@ export class DefaultDelegatedRoutingV1HttpApiClient {
             return {
                 Schema: 'peer',
                 ID: peerIdFromString(record.ID),
-                Addrs: record.Addrs.map(multiaddr),
+                Addrs: record.Addrs?.map(multiaddr) ?? [],
                 Protocols: Array.isArray(record.Protocols) ? record.Protocols : []
             };
         }
